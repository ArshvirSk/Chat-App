{"version":3,"sources":["Chat.js","App.js","index.js"],"names":["Chat","_ref","socket","username","room","_useState","useState","_useState2","Object","slicedToArray","currentMessage","setCurrentMessage","_useState3","_useState4","messageList","setMessageList","sendMessage","_ref2","asyncToGenerator","_regeneratorRuntime","mark","_callee","messageData","wrap","_context","prev","next","author","message","time","Date","now","getHours","getMinutes","emit","list","concat","toConsumableArray","stop","apply","this","arguments","useEffect","on","data","react_default","a","createElement","className","onClick","window","location","reload","lib_esm","map","messageContent","id","type","value","placeholder","onChange","event","target","onKeyPress","key","io","connect","App","setUsername","setRoom","_useState5","_useState6","showChat","setShowChat","joinRoom","localStorage","setItem","particlesInit","App_regeneratorRuntime","main","console","log","loadFull","_x","src","alt","esm","init","loaded","container","options","fpsLimit","interactivity","events","enable","mode","onHover","resize","modes","push","quantity","repulse","distance","duration","particles","color","links","opacity","width","collisions","move","direction","outModes","default","random","speed","straight","number","density","area","shape","size","min","max","detectRetina","src_Chat","action","required","class","ReactDOM","render","react_router_dom","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.a7743215.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\n\r\nfunction Chat({ socket, username, room }) {\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n  const [messageList, setMessageList] = useState([]);\r\n\r\n  const sendMessage = async () => {\r\n    if (currentMessage !== \"\") {\r\n      const messageData = {\r\n        room: room,\r\n        author: username,\r\n        message: currentMessage,\r\n        time:\r\n          new Date(Date.now()).getHours() +\r\n          \":\" +\r\n          new Date(Date.now()).getMinutes(),\r\n      };\r\n\r\n      await socket.emit(\"send_message\", messageData);\r\n      setMessageList((list) => [...list, messageData]);\r\n      setCurrentMessage(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.on(\"receive_message\", (data) => {\r\n      setMessageList((list) => [...list, data]);\r\n    });\r\n  }, [socket]);\r\n\r\n  return (\r\n    <div className=\"chat-window\">\r\n      <button className=\"LeaveBut\" onClick={() => window.location.reload(false)}>Leave Chat</button>\r\n      <div className=\"chat-header\">\r\n        <p>Room Id: {room}</p>\r\n      </div>\r\n      <div className=\"chat-body\">\r\n        <ScrollToBottom className=\"message-container\">\r\n          {messageList.map((messageContent) => {\r\n            return (\r\n              <div\r\n                className=\"message\"\r\n                id={username === messageContent.author ? \"you\" : \"other\"}\r\n              >\r\n                <div>\r\n                  <div className=\"message-content\">\r\n                    <p>{messageContent.message}</p>\r\n                  </div>\r\n                  <div className=\"message-meta\">\r\n                    <p id=\"time\">{messageContent.time}</p>\r\n                    <p id=\"author\">{messageContent.author}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </ScrollToBottom>\r\n      </div>\r\n      <div className=\"chat-footer\">\r\n        <input\r\n          type=\"text\"\r\n          value={currentMessage}\r\n          placeholder=\"Type a Message...\"\r\n          onChange={(event) => {\r\n            setCurrentMessage(event.target.value);\r\n          }}\r\n          onKeyPress={(event) => {\r\n            event.key === \"Enter\" && sendMessage();\r\n          }}\r\n        />\r\n        <button onClick={sendMessage}>&#9658;</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;","import React from \"react\";\nimport { useState } from \"react\";\nimport Particles from \"react-tsparticles\";\nimport { loadFull } from \"tsparticles\";\nimport io from \"socket.io-client\";\nimport Chat from \"./Chat\";\nimport \"./App.css\";\n\nconst socket = io.connect(\"https://salty-retreat-48240.herokuapp.com\");\n// const socket = io.connect(\"https://localhost:3001\");\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [showChat, setShowChat] = useState(false);\n\n  const joinRoom = () => {\n    if (username !== \"\" && room !== \"\") {\n      socket.emit(\"join_room\", room);\n      setShowChat(true);\n      localStorage.setItem('username', username);\n    }\n  };\n\n  const particlesInit = async (main) => {\n    console.log(main);\n    await loadFull(main);\n  };\n  \n  const particlesLoaded = (container) => {\n    console.log(container);\n  };\n\n  return (\n    <div className=\"App\">\n      <img src=\"./logo.png\" alt=\"\" />\n      <Particles className=\"particles\"\n            id=\"tsparticles\"\n            init={particlesInit}\n            loaded={particlesLoaded}\n            options={{\n              fpsLimit: 60,\n              interactivity: {\n                events: {\n                  onClick: {\n                    enable: true,\n                    mode: \"push\",\n                  },\n                  onHover: {\n                    enable: true,\n                    mode: \"repulse\",\n                  },\n                  resize: true,\n                },\n                modes: {\n                  push: {\n                    quantity: 4,\n                  },\n                  repulse: {\n                    distance: 200,\n                    duration: 0.4,\n                  },\n                },\n              },\n              particles: {\n                color: {\n                  value: \"#ff0000\",\n                },\n                links: {\n                  color: \"#ff0000\",\n                  distance: 200,\n                  enable: true,\n                  opacity: 0.5,\n                  width: 1,\n                },\n                collisions: {\n                  enable: true,\n                },\n                move: {\n                  direction: \"none\",\n                  enable: true,\n                  outModes: {\n                    default: \"bounce\",\n                  },\n                  random: false,\n                  speed: 2,\n                  straight: false,\n                },\n                number: {\n                  density: {\n                    enable: true,\n                    area: 800,\n                  },\n                  value: 80,\n                },\n                opacity: {\n                  value: 0.5,\n                },\n                shape: {\n                  type: \"circle\"\n                },\n                size: {\n                  value: { min: 1, max: 3 },\n                },\n              },\n              detectRetina: true,\n            }}\n        />\n      {!showChat ? (\n        <div className=\"joinChatContainer\">\n          <h3>Join Chat</h3>\n          <form action=\"\">\n            <div className=\"input-field\">\n              <input\n                className=\"effect\"\n                type=\"text\"\n                placeholder=\"Username\"\n                onChange={(event) => {\n                  setUsername(event.target.value);\n                }}\n                required\n              />\n              <span class=\"focus-border\"></span>\n            </div>\n            <div className=\"input-field\">\n              <input\n                className=\"effect\"\n                type=\"text\"\n                placeholder=\"Room Id\"\n                onChange={(event) => {\n                  setRoom(event.target.value);\n                }}\n                onKeyPress={(event) => {\n                  event.key === \"Enter\" && joinRoom();\n                }}\n                required\n              />\n              <span class=\"focus-border\"></span>\n            </div>\n          </form>\n          <button onClick={joinRoom}>Join A Room</button>\n        </div>\n        ) : (\n          <div>\n            <Chat socket={socket} username={username} room={room} />\n          </div>\n        )}\n    </div>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from 'react-router-dom';\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}